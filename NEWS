Snakeoil Release Notes
======================


snakeoil 0.3.6.1: February 7th, 2010

* Licensing changes- see COPYING for specifics.  Majority of snakeoil
  is now GPL2/BSD 3 clause w/ a few exemptions.

* minor cleanup to extensions for GC support and stricter gcc.


snakeoil 0.3.6: January 8th, 2010

* add a cpy extension for jit_attr functionality; this brings the
  overhead down to effectively background noise for most usages.

* add a reflective_hash class to snakeoil.klass; this is primarily used
  for when the has is precomputed and stored somewhere.

* add an extension for ProtectedSet.__contains__; this levels a nice
  speedup for pcheck scans.

* enable a set of extensions for slots backed mappings; primarily affects
  pkgcore cache data objects, end result being pquery against a full
  repo in raw mode is about 8% faster overall.


snakeoil 0.3.5: December 27th, 2009

* snakeoil.struct_compat module was added; provides py2.4 compat, and
  adds read/write methods that take an fd and operate as unpack/pack
  against that fd.  This simplifies invocation/stream access primarily.

* add test_slot_shadowing; basically looks for __slots__ usage where
  a derivative class adds slotting the parent already provides, thus
  leading to a very unfun set of bugs and wasted memory.

* fix test_demandload_usage to properly recurse...


snakeoil 0.3.4: December 13th, 2009

* add compatibility.is_py3k_like for marking if it's >=py2.7, or py3k


snakeoil 0.3.3: October 26th, 2009

* use the registration framework for epydoc to make it aware of partials.

* monkeypatch pydoc.isdata on the fly to be aware of partials.  This
  makes pydoc output far more useful (and matches what is expected).

* experimental py3.1 support via 2to3.  setup.py automatically will
  convert the source if invoked by a py3k interpretter.

* snakeoil.osutils.readlines was expanded out into multiple functions,
  utf8, ascii, utf8_strict, ascii_strict, and bytes.  'Strict' means
  that we always want it decoded.  Non strict is useful when the file
  has some utf8 in it you don't care about, and don't want to take
  the codecs.open performance hit under py2k.  Under py3k, it's always
  decoded (required due to py3k changes).

* snakeoil.osutils.readfile was expanded out into multiple functions,
  utf8, ascii, ascii_strict, and bytes.  Use the appropriate one- this
  will make py3k compliance far easier.

* optimization in snakeoil.osutils.readlines; for small files, it's
  roughly a 4-8% speedup, for larger files (over half a meg) growing
  past 25%.  This puts it's performance at roughly 2x over the open
  equivalent for small files, and near 10-15% faster for larger files.

* snakeoil.klass grew new properties to ease common tasks;
  jit_attr (invoke the target func to get the value, cache the value,
  return that value till the cached value is wiped).
  alias_attr (when that attr is accessed, hand the attribute the alias
  targets).

* snakeoil.compatibility additions; next, cmp, file_cls, and is_py3k, next,
  intern, sort_cmp (to paper over sorted no longer accepting a cmp arg), and
  sort_cmp (to paper over list.sort no longer accepting a cmp arg).

* snakeoil.klass.cached_hash; decorator to automatically cache the results
  of the target function.  primarily intended for __hash__ implementations.

* snakeoil.klass.inject_richcmp_methods_from_cmp ; passed a class scope,
  it'll automatically add __le__, __lt__, __gt__, __eq__, etc, via invoking
  __cmp__ if the python version is py3k.

* snakeoil/caching_2to3.py, a caching form of 2to3 that relies on an
  env var 'PY2TO3_CACHEDIR' to determine where to store cached versions
  of converted source.  Algorithm behind the cache is md5 based- if the
  md5 of the targeted source exists in the cachedir, it reuses the results
  from the previous run instead of invoking 2to3.  Massive performance
  speed up from this- uncached, setup.py test is ~32s.  cached, ~1.9s.
  That said, this is experimental- bug reports welcome however.

* setup.py test has been heavily enhanced- now it does it's testing
  against a standalone install of the source, should have zero
  side affects on the underlying source.

* paper over a bug in cElementTree where it fails to import fully, but
  doesn't raise ImportError.  This address upstream python bug 3475.

* snakeoil no longer installs a bundled copy of elementtree if the
  python version is 2.5 or higher (no need, python bundles it's own).

* snakeoil.test.test_demandload_usage now supports blacklisting- this
  is primarily useful for blocking py3k specific modules from being checked
  under py2k, and vice versa.

* in test_demandload_usage helper functionality it's possible for
  a file to disappear under it's feet- ignore it, lock files from
  trial can trigger this.  Note it via logging.warn, and continue.


snakeoil 0.3.2: March 24, 2009

* handle a race condition in ensure_dirs where the directory is created
  underfoot (thus a non issue).

* massive memory reduction for snakeoil.tar monkey patching;
  via punting the unused .buf storage (512 byes per TarInfo).  Grand total,
  this is a 70% reduction of the memory used compared to vanilla TarInfo
  (50% less then snakeoil 0.3).

* tweak snakeoil.tar monkey patching to re-enable memory savings on python2.6

* correct python2.6 compatibility issues; __(sizeof|format|subclasshook)__
  awareness, and handle getattr throwing AttributeError in the infinite
  recursion getattr tests.

* for test_demandload_usage, output the exception that caused the demandload
  'touch' to fail.


snakeoil 0.3.1: November 7, 2008

* pkgcore ticket 215; fixup corner case errors in normpath cpy.


snakeoil 0.3: August 28, 2008

* refactor dependant_methods to stop creating strong cycles that the python
  vm seems unable to break.  Shift the func storage away from .raw_func to
  .sd_raw_func in addition.  Add in __(un|)wrap_stage_dependencies__ so that
  invocation of unwrap then wrap will make changes to stage_depends take
  affect.

* intern gname and uname for TarInfo objects via property trickery- again,
  purpose being less memory usage.

* AtomicFile now marks itself as initially finalized until it has a fd; this
  removes spurios complaints from __del__

* LimitedChangeSet got an additional kwarg; key_validator.  A function can
  be passed in via this to do validation of the desired key- either it throws
  an exception, or returns the key to use.


snakeoil 0.2: March 18, 2008

* snakeoil.fileutils.iter_read_bash and friends grew an allow_inline_comment
  param to control stripping of inlined comments; defaults to True.

* bash parsing bug where "x=y" w/out a trailing newline wasn't returning the
  'y' value.

* x=-* (specifically unquoted) is a valid assignment, fixed.

* added SNAKEOIL_DEMANDLOAD_PROTECTION environment variable- if set to
  something other then 'yes', disables the placeholder checks.
  Main intention for this functionality is for when code is introspecting
  demandload consuming code (epydoc for example), and inadvertantly triggers
  the access multiple times.


snakeoil 0.1: November 11, 2007

* Add a cpython version of snakeoil.formatters.


snakeoil 0.1 rc2: July 06, 2007

* Pulled in any/all cpy extensions if not available in current python version.

* Added several pylint checks for naughty things like bool(len(seq)), itering
  over dict.keys() and shadowing builtins.

* Misc doc improvements.

* Rewrite demandload with a new multiple arg style, and update the appropriate
  pylint checker.

* Fix title updating by flushing the formatter's stream.

* overhaul demandload test case for consuming code.

* Add snakeoil.containers.SetMixin to provide set methods for various
  objects.

* Remove snakeoil.const - unused.

* Improve test coverage in general.

* Add folding dicts.

* Move snakeoil.file to snakeoil.fileutils.

* Initial release, split out from pkgcore.util.*.
